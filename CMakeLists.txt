cmake_minimum_required(VERSION 2.8)
cmake_policy(SET CMP0017 NEW)
if(NOT ${CMAKE_VERSION} VERSION_LESS 3.0.0)
    cmake_policy(SET CMP0042 NEW)
endif()
project( OPENCV CXX )

if (NOT CMAKE_BUILD_TYPE)
    # By default, use Release mode
    set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Type of build" FORCE)

    # On 32bit architectures, use RelWithDebInfo
    if (CMAKE_COMPILER_IS_GNUCC AND CMAKE_SIZEOF_VOID_P EQUAL 4)
        set(CMAKE_BUILD_TYPE "RelWithDebInfo" CACHE STRING "Type of build" FORCE)
    endif()
endif()

message(STATUS "Building ${CMAKE_BUILD_TYPE}")
find_package( OpenCV REQUIRED)
add_executable( canny canny.cpp )
target_link_libraries( canny ${OpenCV_LIBS} )
add_executable( video video.cpp )
target_link_libraries( video ${OpenCV_LIBS} )
add_executable( tlr tlr.cpp )
target_link_libraries( tlr ${OpenCV_LIBS} )
add_executable( task_Astar task_Astar.cpp )
target_link_libraries( task_Astar ${OpenCV_LIBS} )
add_executable( task_dijkstra task_dijkstra.cpp )
target_link_libraries( task_dijkstra ${OpenCV_LIBS} )
add_executable(obj_detect obj_detect.cpp)
target_link_libraries(obj_detect ${OpenCV_LIBS})
add_executable(jarvis_match jarvis_match.cpp)
target_link_libraries(jarvis_match ${OpenCV_LIBS})
add_executable(transform transform.cpp)
target_link_libraries(transform ${OpenCV_LIBS})
add_executable(trans_video trans_video.cpp)
target_link_libraries(trans_video ${OpenCV_LIBS})
add_executable(line_detector line_detector.cpp)
target_link_libraries(line_detector ${OpenCV_LIBS})
add_executable(svm svm.cpp)
target_link_libraries(svm ${OpenCV_LIBS})
add_executable(line line.cpp)
target_link_libraries(line ${OpenCV_LIBS})
add_executable(bird bird.cpp)
target_link_libraries(bird ${OpenCV_LIBS})
